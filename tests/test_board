import unittest
from game.board import Board
from game.tiles import Tile
from game.cell import Cell


class TestBoard(unittest.TestCase):
    def test_init(self):
        board = Board()
        self.assertEqual(
            len(board.grid),
            15,
        )
        self.assertEqual(
            len(board.grid[0]),
            15,
        )
    
    def test_place_tile(self):
        board = Board()
        tile = Tile('A', 1)
        self.assertTrue(
            board.place_tile(7, 7, tile)
            )
        self.assertFalse(
            board.place_tile(7, 7, tile)
            )
        
    def test_with_letter_multiplayer(self):
        board = Board()
        word = [
            Cell(letter=Tile('C',1)),
            Cell(letter=Tile('A',1)),
            Cell(letter=Tile('S',2), multiplier=2, multiplier_type='letter'),
            Cell(letter=Tile('A',1))
        ]
        value = board.calculate_word_value(word)
        self.assertEqual(value,7)
    def test_with_word_multiplayer(self):
        board = Board()
        word = [
            Cell(letter=Tile('C',1)),
            Cell(letter=Tile('A',1)),
            Cell(letter=Tile('S',2), multiplier=2, multiplier_type='word'),
            Cell(letter=Tile('A',1))
        ]
        value = board.calculate_word_value(word)
        self.assertEqual(value,10)
    def test_with_word_and_letter_multiplayer(self):
        board = Board()
        word = [
            Cell(letter=Tile('C',1), multiplier=3, multiplier_type='letter'),
            Cell(letter=Tile('A',1)),
            Cell(letter=Tile('S',2), multiplier=2, multiplier_type='word'),
            Cell(letter=Tile('A',1))
        ]
        value = board.calculate_word_value(word)
        self.assertEqual(value,14)
    def test_with_word_and_letter_multiplayer_no_active(self):
        board = Board()
        word = [
            Cell(letter=Tile('C',1), multiplier=3, multiplier_type='letter', status='desactive'),
            Cell(letter=Tile('A',1)),
            Cell(letter=Tile('S',2), multiplier=2, multiplier_type='word', status='desactive'),
            Cell(letter=Tile('A',1))
        ]
        value = board.calculate_word_value(word)
        self.assertEqual(value,5)

    def test_validate_word(self):
        board = Board()
        tile_a = Tile('A', 1)
        tile_b = Tile('B', 2)
        tile_c = Tile('C', 3)

        board.place_tile(
            7, 7, tile_a
            )
        board.place_tile(
            7, 8, tile_b
            )
        board.place_tile(
            7, 9, tile_c
            )

        self.assertTrue(
            board.validate_word(7, 7, 'ABC', 'horizontal')
            )
        self.assertFalse(
            board.validate_word(7, 7, 'ACB', 'horizontal')
            )
        self.assertTrue(
            board.validate_word(7, 7, 'A', 'vertical')
            )
        self.assertFalse(
            board.validate_word(7, 7, 'AB', 'vertical')
            )



if __name__ == '__main__':
    unittest.main()